### Ключевые выводы по уроку №2: Архитектура, целостность и теория БД

#### 1. Целостность (Integrity) vs Непротиворечивость (Consistency)
*   **Целостность** — это **набор правил** (`PRIMARY KEY`, `FOREIGN KEY`, `CHECK` и т.д.), которые гарантируют, что данные в БД всегда будут в допустимом состоянии. Это статическое свойство, контроль за которым полностью возложен на **СУБД**.
*   **Непротиворечивость** — это **желаемое состояние** данных, которое корректно отражает бизнес-логику предметной области. Это более широкое понятие.
*   **Ключевое различие:** Целостность — это часть непротиворечивости, которую можно формализовать и доверить СУБД. Обеспечение же полной непротиворечивости (сложные бизнес-правила) — задача **разработчиков**, использующих транзакции, процедуры и код приложения.

#### 2. Избыточность данных (Redundancy)
*   **Отрицательная избыточность:** Дублирование данных, ведущее к аномалиям (модификации, удаления, добавления). Борьба с ней — главная цель **нормализации** БД.
*   **Управляемая избыточность:** Сознательное дублирование данных для повышения **производительности** (например, хранение итоговой суммы заказа). Цена за это — усложнение логики обновления данных (часто через триггеры).

#### 3. Трехуровневая архитектура ANSI-SPARC (Основа независимости данных)
Цель — сделать так, чтобы изменения в одном уровне не влияли на другие.

| Уровень | Для кого? | Что описывает? | Пример | Инструменты |
| :--- | :--- | :--- | :--- | :--- |
| **Внешний** | Пользователи, приложения | Представления данных, адаптированные под конкретные задачи | `VIEW` для бухгалтерии или отдела доставки | `CREATE VIEW` |
| **Концептуальный** | Архитекторы БД | Полная логическая схема БД: сущности, атрибуты, связи, ограничения | Полное описание таблиц `Users`, `Orders`, `Products` | `CREATE TABLE`, `ALTER TABLE`, `CONSTRAINTS` |
| **Внутренний** | Администраторы БД | Физическое хранение данных на диске | Индексы, файлы данных, партиционирование, сжатие | `CREATE INDEX`, табличные пространства |

**Виды независимости, которые обеспечивает архитектура:**
*   **Логическая:** Возможность изменять структуру таблиц (концептуальный уровень), не ломая работу приложений (внешний уровень). *Пример: добавление нового столбца, который не запрашивают старые приложения.*
*   **Физическая:** Возможность изменять физическое хранение (внутренний уровень), не влияя на логическую структуру и приложения. *Пример: добавление индекса для ускорения запросов.*

#### 4. Практическая значимость
*   **Гибкость и масштабируемость:** Возможность менять и оптимизировать БД, не переписывая код приложений.
*   **Безопасность:** Использование `VIEW` для ограничения доступа к конфиденциальным данным.
*   **Упрощение разработки:** Приложения работают с простыми представлениями (внешний уровень), а не со сложной логической схемой.
